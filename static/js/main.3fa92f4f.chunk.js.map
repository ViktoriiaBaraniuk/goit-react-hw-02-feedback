{"version":3,"sources":["components/Statistics/Statistics.module.css","components/Notification/Notification.module.css","components/Section/Section.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Statistics/Statistics.jsx","components/Notification/Notification.jsx","App.js","index.js"],"names":["module","exports","Section","title","children","FeedbackButton","feedback","onLeaveFeedback","type","data-feedback","onClick","FeedbackOptions","options","map","option","Statistics","props","good","neutral","bad","total","positivePercentage","className","s","statisticList","Notification","message","notification","App","state","btnIncrement","target","dataset","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oIACAA,EAAOC,QAAU,CAAC,cAAgB,oC,gBCAlCD,EAAOC,QAAU,CAAC,aAAe,qC,8LCgBlBC,MAdf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACxB,OACE,oCACE,6BAAKD,IACJC,MCJDC,G,MAAiB,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,gBAClC,OACE,wBAAQC,KAAK,SAASC,gBAAeH,EAAUI,QAASH,EAAxD,SACGD,MAqCQK,EAhCS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASL,EAAsB,EAAtBA,gBAClC,OAAOK,EAAQC,KAAI,SAAAC,GAAM,OACvB,cAAC,EAAD,CAEER,SAAUQ,EACVP,gBAAiBA,GAFZO,O,gBCgBIC,MA3Bf,SAAoBC,GAAQ,IAClBC,EAAkDD,EAAlDC,KAAMC,EAA4CF,EAA5CE,QAASC,EAAmCH,EAAnCG,IAAKC,EAA8BJ,EAA9BI,MAAOC,EAAuBL,EAAvBK,mBACnC,OACE,qBAAIC,UAAWC,IAAEC,cAAjB,UACE,6BACE,0CAAaP,OAEf,6BACE,6CAAgBC,OAElB,6BACE,yCAAYC,OAEd,6BACE,2CAAcC,OAEhB,6BACE,uDAA0BC,EAA1B,a,gBCTOI,MARf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,mBAAGJ,UAAWC,IAAEI,aAAhB,SAA+BD,KCuDzBE,E,4MApDbC,MAAQ,CACNZ,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPW,aAAe,YAAiB,IACtBxB,EADqB,EAAbyB,OACYC,QAApB1B,SACR,OAAO,EAAK2B,UAAS,SAAAC,GAAS,sBAC3B5B,EAAW4B,EAAU5B,GAAY,O,EAItC6B,mBAAqB,WAAO,IAAD,EACM,EAAKN,MACpC,OAFyB,EACjBZ,KADiB,EACXC,QADW,EACFC,K,EAGzBiB,gCAAkC,WAChC,IAAMhB,EAAQ,EAAKe,qBACXlB,EAAS,EAAKY,MAAdZ,KACR,OAAOG,EAAQiB,KAAKC,MAAOrB,EAAOG,EAAS,KAAO,G,uDAE1C,IAAD,EACwBmB,KAAKV,MAA5BZ,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACjBC,EAAQmB,KAAKJ,qBACbd,EAAqBkB,KAAKH,kCAChC,OACE,qCACE,cAAC,EAAD,CAASjC,MAAM,wBAAf,SACE,cAAC,EAAD,CACES,QAAS,CAAC,OAAQ,UAAW,OAC7BL,gBAAiBgC,KAAKT,iBAI1B,cAAC,EAAD,CAAS3B,MAAM,aAAf,SACGiB,EACC,cAAC,EAAD,CACEH,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,IAGtB,cAAC,EAAD,CAAcK,QAAQ,+B,GA9ChBc,aCAlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.3fa92f4f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"statisticList\":\"Statistics_statisticList__3C8X5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notification\":\"Notification_notification__3TxkC\"};","import PropTypes from 'prop-types';\r\nimport s from './Section.module.css';\r\n\r\nfunction Section({ title, children }) {\r\n  return (\r\n    <section>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.element.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import PropTypes from 'prop-types';\r\nimport s from './FeedbackOptions.module.css';\r\n\r\nconst FeedbackButton = ({ feedback, onLeaveFeedback }) => {\r\n  return (\r\n    <button type=\"button\" data-feedback={feedback} onClick={onLeaveFeedback}>\r\n      {feedback}\r\n    </button>\r\n  );\r\n};\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return options.map(option => (\r\n    <FeedbackButton\r\n      key={option}\r\n      feedback={option}\r\n      onLeaveFeedback={onLeaveFeedback}\r\n    />\r\n  ));\r\n};\r\n\r\n/* const FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return (\r\n    <ul>\r\n      {options.map(option => (\r\n        <li key={option}>\r\n          <button\r\n            type=\"button\"\r\n            data-feedback={option}\r\n            onClick={onLeaveFeedback}\r\n          >\r\n            {option}\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}; */\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string),\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import PropTypes from 'prop-types';\r\nimport s from './Statistics.module.css';\r\n\r\nfunction Statistics(props) {\r\n  const { good, neutral, bad, total, positivePercentage } = props;\r\n  return (\r\n    <ul className={s.statisticList}>\r\n      <li>\r\n        <span>Good: {good}</span>\r\n      </li>\r\n      <li>\r\n        <span>Neutral: {neutral}</span>\r\n      </li>\r\n      <li>\r\n        <span>Bad: {bad}</span>\r\n      </li>\r\n      <li>\r\n        <span>Total: {total}</span>\r\n      </li>\r\n      <li>\r\n        <span>Positive feedback: {positivePercentage}%</span>\r\n      </li>\r\n    </ul>\r\n  );\r\n}\r\n\r\nStatistics.propTypes = {\r\n  props: PropTypes.objectOf(PropTypes.number).isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import PropTypes from 'prop-types';\r\nimport s from './Notification.module.css';\r\n\r\nfunction Notification({ message }) {\r\n  return <p className={s.notification}>{message}</p>;\r\n}\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import { Component } from 'react';\nimport Section from './components/Section/Section';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Statistics from './components/Statistics/Statistics';\nimport Notification from './components/Notification/Notification';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  btnIncrement = ({ target }) => {\n    const { feedback } = target.dataset;\n    return this.setState(prevState => ({\n      [feedback]: prevState[feedback] + 1,\n    }));\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n  countPositiveFeedbackPercentage = () => {\n    const total = this.countTotalFeedback();\n    const { good } = this.state;\n    return total ? Math.round((good / total) * 100) : 0;\n  };\n  render() {\n    const { good, neutral, bad } = this.state;\n    const total = this.countTotalFeedback();\n    const positivePercentage = this.countPositiveFeedbackPercentage();\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={['good', 'neutral', 'bad']}\n            onLeaveFeedback={this.btnIncrement}\n          ></FeedbackOptions>\n        </Section>\n\n        <Section title=\"Statistics\">\n          {total ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={total}\n              positivePercentage={positivePercentage}\n            ></Statistics>\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n      </>\n    );\n  }\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}